plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'maven-publish'
    id "com.jfrog.bintray" version "${jfrogBintrayVersion}"
}

apply plugin: 'kotlin'

ext {
    bintrayRepo = "kafka"
    bintrayName = "consumer-lag-monitoring"

    publishingGroupId = "com.omarsmak.kafka"
    publishingArtifactId = "consumer-lag-monitoring"

    libraryDescription = "Client tool that exports the consumer lag of Kafka consumer groups to Prometheus or your terminal"
    sitUrl = "https://github.com/omarsmak/kafka-consumer-lag-monitoring"
    gitUrl = "https://github.com/omarsmak/kafka-consumer-lag-monitoring.git"
    developerId = "omarsmak"
    developerName = "Omar Al-Safi"
    developerEmail = "omarsmak@gmail.com"
    licenceName = "The MIT License"
    licenseUrl = "https://opensource.org/licenses/MIT"
    libraryLicences = ['MIT']
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile "org.apache.kafka:kafka-clients:$kafkaVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "io.mockk:mockk:${mockkVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
}

test {
    useJUnitPlatform()
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['mavenPublication']
    
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = developerId
        vcsUrl = gitUrl
        licenses = ['MIT']
        version {
            name = libraryVersion
            desc = libraryDescription
            released = new Date()
        }
    }
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name licenceName
            url licenseUrl
            distribution "repo"
        }
    }
    developers {
        developer {
            id developerId
            name developerName
            email developerEmail
        }
    }

    scm {
        url gitUrl
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId publishingGroupId
            artifactId publishingArtifactId
            version libraryVersion
            pom{
                withXml {
                    def root = asNode()
                    root.appendNode('description', libraryDescription)
                    root.appendNode('name', libraryName)
                    root.appendNode('url', sitUrl)
                    root.children().last() + pomConfig
                }
            }
        }
    }
}